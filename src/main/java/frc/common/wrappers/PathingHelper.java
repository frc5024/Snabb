package frc.common.wrappers;

import jaci.pathfinder.PathfinderFRC;
import jaci.pathfinder.Trajectory;
import jaci.pathfinder.followers.EncoderFollower; 
import com.kauailabs.navx.frc.AHRS;

import frc.common.wrappers.TankTrajectory;
import frc.common.wrappers.GearBox;

/**
 * Utility class for simplifying motion profiling
 */
public class PathingHelper {
    /**
     * A method for generating and configuring TankTrajectory objects
     * 
     * @param filename Name of the motion profile generated by PathWeaver (ex. myprofile.pf1.csv)
     * @param left_gearbox The left GearBox of the robot's DrieTrain
     * @param right_gearbox The right GearBox of the robot's DrieTrain
     * @param gyro The NAVX gyro object
     * @param swap_paths Should the left and right paths be swapped? (This will fix the 2019 pathing issue)
     * @param invert_gyro Should the gyro be inverted?
     * @param invert_path Should the robot follow the path backwards? (Usefull for backing up in a path)
     * 
     * @return A pre-configured TankTrajectory
     */
    public static TankTrajectory loadTankProfile(String filename, GearBox left_gearbox, GearBox right_gearbox, AHRS gyro, boolean swap_paths, boolean invert_gyro, boolean invert_path){
        /* Load file into a left and right path */
        Trajectory left_trajectory;
        Trajectory right_trajectory;

        try{
            if (swap_paths){
                left_trajectory = PathfinderFRC.getTrajectory(filename + ".right");
                right_trajectory = PathfinderFRC.getTrajectory(filename + ".left");
            } else {
                left_trajectory = PathfinderFRC.getTrajectory(filename + ".left");
                right_trajectory = PathfinderFRC.getTrajectory(filename + ".right");
            }
        }  catch (Exception e) {
            System.out.println("FATAL: Unable to load trajectory "+ filename +"!");
            return new TankTrajectory(left_gearbox, right_gearbox, gyro, 0.02, false, false);
        }

        /* Create the object to be outputted */
        TankTrajectory output = new TankTrajectory(left_gearbox, right_gearbox, gyro, left_trajectory.get(0).dt, invert_gyro, invert_path);

        /* Initialize the encoder followers */
        output.left_encoderfollower = new EncoderFollower(left_trajectory);
        output.right_encoderollower = new EncoderFollower(right_trajectory);

        return output;
    }
}